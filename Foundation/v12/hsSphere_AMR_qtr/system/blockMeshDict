/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2406                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// backgroundMesh
// {
    backgroundMeshSize 0.02; // max background mesh cell size (in meters)
    xMin     -1;
    xMax     3.66268;
    yMin     0;
    yMax     0.988702;
    zMin     0;
    zMax     0.988702;
    
    // uncomment to manually define number of cells    
/*     xCells  20;
    yCells  20;
    zCells  20; */

    // commment to manually define number of cells. 
    xCells  #calc "ceil(($xMax - $xMin) / $backgroundMeshSize)"; // #eval used to calculate # of cells
    yCells  #calc "ceil(($yMax - $yMin) / $backgroundMeshSize)"; // ceil - rounds to next highest integer # of cells
    zCells  #calc "ceil(($zMax - $zMin) / $backgroundMeshSize)"; // mag - magnitude. equivalent to absolute value.
// }

convertToMeters 1;//scale   1;

vertices
(
    ($xMin $yMin $zMin)
    ($xMax $yMin $zMin)
    ($xMax $yMax $zMin)
    ($xMin $yMax $zMin)

    ($xMin $yMin $zMax)
    ($xMax $yMin $zMax)
    ($xMax $yMax $zMax)
    ($xMin $yMax $zMax)
);

blocks
(
    hex (0 1 2 3 4 5 6 7)
    (
        $xCells
        $yCells
        $zCells
    )
    simpleGrading (1 1 1)
);

edges
(
);


boundary
(
// Faces named in blockMesh -help 
    inlet1
    {   
        type patch;
        faces
        (
            (0 3 7 4)   // first YZ face (f0)
        );
    }

    outlet1
    {   
        type patch;
        faces
        (
            (1 5 6 2)   // 2nd YZ face (f1)
        );
    }

    farfield //slip1
    {   
        type patch;
        faces
        (
            (4 7 6 5)   // 2nd XY face (f5)
            (3 2 6 7)   // 2nd XZ face (f3)
        );
    }

    symmetry1
    {   
        type symmetryPlane;
        faces
        (
            (0 1 2 3)   // 1st XY face (f4)
        );
    }

    symmetry2
    {   
        type symmetryPlane;
        faces
        (
            (0 4 5 1)   // 1st XZ face (f2)
        );
    } 
);

mergePatchPairs
(
);

// ************************************************************************* //
